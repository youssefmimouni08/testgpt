# Docker

# Build a Docker image
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- newUI

resources:
- repo: self

variables:
  - group: 'azure-variable-group'
  - name: dockerfilePath
    value: '$(Build.SourcesDirectory)/app/Dockerfile'
  - name: tag
    value: '$(Build.BuildId)'
  # Agent VM image name
  - name: vmImageName
    value: 'ubuntu-latest'
stages:
- stage: Build
  displayName: Build and push stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: Docker@2
      displayName: Build and push an image to container registry
      inputs:
        command: build
        repository: $(chatgptImageRepo)
        dockerfile: $(dockerfilePath)
        containerRegistry: $(dockerRegistryServiceConnection)
        tags: |
          $(tag)
    - task: Docker@2
      displayName: Push Docker image to container registry
      inputs:
        command: push
        repository: $(chatgptImageRepo)
        tags: |
          $(tag)
        containerRegistry: $(dockerRegistryServiceConnection)  
- stage: Deploy 
  displayName: Deploy
  jobs:
  - job: DeployToACI
    pool:
      vmImage: 'ubuntu-latest'
    steps:
    - task: TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: 'latest'
    - task: TerraformTaskV2@2
      displayName: 'Terraform : Init'
      inputs:
        command: 'init'
        workingDirectory: '$(Build.SourcesDirectory)/terraform'
        backendServiceArm: $(ARMServiceConnection)
        backendAzureRmResourceGroupName: $(ressourceGroup)
        backendAzureRmResourceGroupLocation: 'germanywestcentral'
        backendAzureRmStorageAccountName: 'adragosstorage'
        backendAzureRmContainerName: 'chatgpttfstate'
        backendAzureRmKey: 'terraform.tfstate'
    - task: TerraformTaskV2@2
      displayName: 'Terraform Validate'
      inputs:
        command: 'validate'
        workingDirectory: '$(Build.SourcesDirectory)/terraform'
    - task: TerraformTaskV2@2
      displayName: 'Terraform Apply'
      inputs:
        command: 'apply'
        workingDirectory: '$(Build.SourcesDirectory)/terraform'
        environmentServiceNameAzureRM: $(ARMServiceConnection)
        commandOptions: '-auto-approve -var "container_image=$(chatgptImageRepo)" -var "image_tag=$(tag)"  -var "acr_password=$(azureRegistryPassword)" -var "container_name=$(chatgptImageRepo)" '
